buildscript {
    ext {

        tempSpringBootVersion = '2.0.4.RELEASE';
        springBootVersion = tempSpringBootVersion.equals(springBootVersion) ? springBootVersion : tempSpringBootVersion;

        springClouds = [
                scs            : "org.springframework.cloud:spring-cloud-starter",

//                scsConfig      : "org.springframework.cloud:spring-cloud-starter-config",
                scsConfigClient: "org.springframework.cloud:spring-cloud-config-client",
                scsConfigServer: "org.springframework.cloud:spring-cloud-config-server",

                scsBus         : "org.springframework.cloud:spring-cloud-bus",
                scsStreamKafka : "org.springframework.cloud:spring-cloud-starter-stream-kafka",
                scsStreamRabbit: "org.springframework.cloud:spring-cloud-starter-stream-rabbit",
                scsSleuth      : "org.springframework.cloud:spring-cloud-starter-sleuth",

                scsEurekaServer: "org.springframework.cloud:spring-cloud-starter-eureka-server:1.4.5.RELEASE",
                scsEurekaClient: "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:1.4.5.RELEASE",
                scsRibbon      : "org.springframework.cloud:spring-cloud-starter-ribbon:1.4.5.RELEASE",
                scsFeign       : "org.springframework.cloud:spring-cloud-starter-feign:1.4.5.RELEASE",
                scsZuul        : "org.springframework.cloud:spring-cloud-starter-zuul:1.4.5.RELEASE",
                scsHystrix     : "org.springframework.cloud:spring-cloud-starter-hystrix:1.4.5.RELEASE",

        ]
    }

//    dependencies {
//        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
//        classpath "io.spring.gradle:dependency-management-plugin:1.0.2.RELEASE"
//    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Finchley.RELEASE'
    }
}

dependencies {

    def d = (all);
    testCompile(d.sbsTest)
    runtime(d.sbsDevtools);
    compile(d.sbsConfigurationProcessor)

}

